{"version":3,"sources":["utility/Spinner/Spinner.js","App.js","reducers/authReducer.js","reducers/siteModal.js","reducers/rootReducer.js","index.js"],"names":["library","add","faSpinner","Spinner","className","icon","size","spin","Component","Home","lazy","NavBar","SingleFullVenue","Modal","CityVenues","PaymentSuccess","Account","Search","App","basename","fallback","path","component","exact","initState","openClose","content","rootReducer","combineReducers","auth","state","action","type","payload","siteModal","persistConfig","key","storage","stateReconciler","autoMergeLevel2","blacklist","persistedReducer","persistReducer","theStore","applyMiddleware","reduxPromise","createStore","persistor","persistStore","ReactDOM","render","store","loading","document","getElementById"],"mappings":"6MAKAA,EAAQC,IAAIC,K,IAENC,E,iLAGE,OACI,yBAAKC,UAAU,mBACX,kBAAC,IAAD,CAAiBC,KAAK,UAAUC,KAAK,KAAKC,MAAI,S,GALxCC,aAWPL,O,8PCbTM,EAAQC,gBAAK,kBAAI,8DAEjBC,EAAUD,gBAAK,kBAAI,+DAEnBE,EAAmBF,gBAAK,kBAAI,qEAE5BG,EAASH,gBAAK,kBAAI,kCAElBI,EAAcJ,gBAAK,kBAAI,wDAEvBK,EAAkBL,gBAAK,kBAAI,+DAE3BM,EAAWN,gBAAK,kBAAI,sEAEpBO,EAASP,gBAAK,kBAAI,8DAuBTQ,E,iLAlBV,OACG,kBAAC,IAAD,CAAQC,SAAS,gBACrB,kBAAC,WAAD,CAAUC,SAAU,kBAACjB,EAAA,EAAD,OACnB,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,UAAWX,IAC3B,kBAAC,IAAD,CAAOY,OAAK,EAACF,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACF,KAAK,cAAcC,UAAWV,IAC3C,kBAAC,IAAD,CAAOW,OAAK,EAACF,KAAK,kBAAkBC,UAAWR,IAC/C,kBAAC,IAAD,CAAOS,OAAK,EAACF,KAAK,gCAAgCC,UAAWP,IAC7D,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,sBAAsBC,UAAWL,IAC7C,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWT,U,GAbdL,a,eCrBZgB,EAAY,GCAZA,EAAY,CAACC,UAAW,SAASC,QAAS,ICSjCC,EALKC,YAAgB,CAChCC,KFJU,WAA8B,IAA7BC,EAA4B,uDAApBN,EAAWO,EAAS,uCACvC,MAAiB,oBAAdA,EAAOC,KACCD,EAAOE,QACK,WAAdF,EAAOC,KACLR,EAEAM,GEDXI,UDJU,WAA8B,IAA7BJ,EAA4B,uDAApBN,EAAWO,EAAS,uCACvC,MAAmB,eAAhBA,EAAOC,KACCD,EAAOE,QAEXH,K,mEEYLK,EAAgB,CAClBC,IAAK,OACLC,YACAC,gBAAiBC,IACjBC,UAAW,CAAC,cAGVC,EAAmBC,YAAeP,EAAeR,GACjDgB,EAAWC,YAAgBC,IAAhBD,CAA8BE,IAA9BF,CAA2CH,GACtDM,EAAYC,YAAaL,GAE/BM,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOR,GACb,kBAAC,IAAD,CAAaS,QAAS,kBAACjD,EAAA,EAAD,MAAa4C,UAAWA,GAC1C,kBAAC,EAAD,QAGRM,SAASC,eAAe,W","file":"static/js/main.c6c9b5e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Spinner.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nlibrary.add(faSpinner);\n\nclass Spinner extends Component{\n\n    render(){\n        return(\n            <div className=\"spinner-wrapper\">\n                <FontAwesomeIcon icon=\"spinner\" size=\"6x\" spin/>\n            </div>\n)\n    }\n}\n\nexport default Spinner;\n","import React, { Component, lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Spinner from './utility/Spinner/Spinner';\n// import Home from './pages/Home/Home';\nconst Home  = lazy(()=>import('./pages/Home/Home')) ;\n// import NavBar from './utility/NavBar/NavBar';\nconst NavBar  = lazy(()=>import('./utility/NavBar/NavBar')) ;\n// import SingleFullVenue from './pages/SingleFullVenue/SingleFullVenue';\nconst SingleFullVenue  = lazy(()=>import('./pages/SingleFullVenue/SingleFullVenue')) ;\n// import Modal from './utility/Modal/Modal';\nconst Modal  = lazy(()=>import('./utility/Modal/Modal')) ;\n// import CityVenues from './pages/CityVenues/CityVenues';\nconst CityVenues  = lazy(()=>import('./pages/CityVenues/CityVenues')) ;\n// import PaymentSuccess from './pages/PaymentSuccess/PaymentSuccess';\nconst PaymentSuccess  = lazy(()=>import('./pages/PaymentSuccess/PaymentSuccess')) ;\n// import Account from './pages/Account/Account';\nconst Account  = lazy(()=>import('./pages/Account/Account')) ;\n// import Search from './pages/Search/Search';\nconst Search = lazy(()=>import('./pages/Search/Search'));\n\nclass App extends Component{\n\n\trender(){\n    \treturn(\n      \t\t<Router basename=\"/airbnb-fast\">\n\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t<Route path=\"/\" component={NavBar} />\n\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t<Route exact path=\"/venue/:vid\" component={SingleFullVenue} />\n\t\t\t\t\t<Route exact path=\"/city/:cityName\" component={CityVenues} />\n\t\t\t\t\t<Route exact path=\"/payment-success/:stripeToken\" component={PaymentSuccess} />\n\t\t\t\t\t<Route path=\"/account\" component={Account} />\n\t\t\t\t\t<Route path=\"/search/:searchTerm\" component={Search} />\n\t\t\t\t\t<Route path=\"/\" component={Modal} />\n\t\t\t\t</Suspense>\n      \t\t</Router>\n    \t)\n  \t}\n\n}\n\nexport default App;\n","const initState = {};\nexport default(state = initState, action)=>{\n    if(action.type===\"REGISTER_ACTION\"){\n        return action.payload;\n    }else if(action.type===\"LOGOUT\"){\n        return initState;\n    }else{\n        return state;\n    }\n}","const initState = {openClose: \"closed\",content: \"\"}\n\nexport default(state = initState, action)=>{\n    if(action.type === \"OPEN_MODAL\"){\n        return action.payload;\n    }\n    return state\n}","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport siteModal from './siteModal';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    siteModal: siteModal,\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Spinner from './utility/Spinner/Spinner';\n\n//Redux setup\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport reduxPromise from 'redux-promise';\n\n// Redux Persist Setup\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { PersistGate } from 'redux-persist/integration/react'\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    stateReconciler: autoMergeLevel2,\n    blacklist: ['siteModal',]\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\nconst theStore = applyMiddleware(reduxPromise)(createStore)(persistedReducer);\nconst persistor = persistStore(theStore)\n\nReactDOM.render(\n    <Provider store={theStore}>\n        <PersistGate loading={<Spinner />} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>, \n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}